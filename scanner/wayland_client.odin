/* GENERATED BY ODIN WAYLAND SCANNER*/
package scanner
import wl "../"
import "core:c"
/*
Copyright © 2008-2011 Kristian Høgsberg
    Copyright © 2010-2011 Intel Corporation
    Copyright © 2012-2013 Collabora, Ltd.

    Permission is hereby granted, free of charge, to any person
    obtaining a copy of this software and associated documentation files
    (the "Software"), to deal in the Software without restriction,
    including without limitation the rights to use, copy, modify, merge,
    publish, distribute, sublicense, and/or sell copies of the Software,
    and to permit persons to whom the Software is furnished to do so,
    subject to the following conditions:

    The above copyright notice and this permission notice (including the
    next paragraph) shall be included in all copies or substantial
    portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
    NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
    BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
    ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
    CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE.
*/
wl_display :: wl.Display
wl_display_interface : wl.Interface
wl_display_set_user_data :: proc(wl_display : ^wl_display,user_data : rawptr){
    wl.proxy_set_user_data((^wl.Proxy)(wl_display), user_data)
}
wl_display_get_user_data :: proc(wl_display : ^wl_display) -> rawptr {
    return wl.proxy_get_user_data((^wl.Proxy)(wl_display))
}
wl_display_get_version :: proc(wl_display : ^wl_display) -> c.uint32_t {
    return wl.proxy_get_version((^wl.Proxy)(wl_display))
}

wl_registry :: struct {}
wl_registry_interface : wl.Interface
wl_registry_set_user_data :: proc(wl_registry : ^wl_registry,user_data : rawptr){
    wl.proxy_set_user_data((^wl.Proxy)(wl_registry), user_data)
}
wl_registry_get_user_data :: proc(wl_registry : ^wl_registry) -> rawptr {
    return wl.proxy_get_user_data((^wl.Proxy)(wl_registry))
}
wl_registry_get_version :: proc(wl_registry : ^wl_registry) -> c.uint32_t {
    return wl.proxy_get_version((^wl.Proxy)(wl_registry))
}

wl_callback :: struct {}
wl_callback_interface : wl.Interface
wl_callback_set_user_data :: proc(wl_callback : ^wl_callback,user_data : rawptr){
    wl.proxy_set_user_data((^wl.Proxy)(wl_callback), user_data)
}
wl_callback_get_user_data :: proc(wl_callback : ^wl_callback) -> rawptr {
    return wl.proxy_get_user_data((^wl.Proxy)(wl_callback))
}
wl_callback_get_version :: proc(wl_callback : ^wl_callback) -> c.uint32_t {
    return wl.proxy_get_version((^wl.Proxy)(wl_callback))
}

wl_compositor :: struct {}
wl_compositor_interface : wl.Interface
wl_compositor_set_user_data :: proc(wl_compositor : ^wl_compositor,user_data : rawptr){
    wl.proxy_set_user_data((^wl.Proxy)(wl_compositor), user_data)
}
wl_compositor_get_user_data :: proc(wl_compositor : ^wl_compositor) -> rawptr {
    return wl.proxy_get_user_data((^wl.Proxy)(wl_compositor))
}
wl_compositor_get_version :: proc(wl_compositor : ^wl_compositor) -> c.uint32_t {
    return wl.proxy_get_version((^wl.Proxy)(wl_compositor))
}

wl_shm_pool :: struct {}
wl_shm_pool_interface : wl.Interface
wl_shm_pool_set_user_data :: proc(wl_shm_pool : ^wl_shm_pool,user_data : rawptr){
    wl.proxy_set_user_data((^wl.Proxy)(wl_shm_pool), user_data)
}
wl_shm_pool_get_user_data :: proc(wl_shm_pool : ^wl_shm_pool) -> rawptr {
    return wl.proxy_get_user_data((^wl.Proxy)(wl_shm_pool))
}
wl_shm_pool_get_version :: proc(wl_shm_pool : ^wl_shm_pool) -> c.uint32_t {
    return wl.proxy_get_version((^wl.Proxy)(wl_shm_pool))
}

wl_shm :: struct {}
wl_shm_interface : wl.Interface
wl_shm_set_user_data :: proc(wl_shm : ^wl_shm,user_data : rawptr){
    wl.proxy_set_user_data((^wl.Proxy)(wl_shm), user_data)
}
wl_shm_get_user_data :: proc(wl_shm : ^wl_shm) -> rawptr {
    return wl.proxy_get_user_data((^wl.Proxy)(wl_shm))
}
wl_shm_get_version :: proc(wl_shm : ^wl_shm) -> c.uint32_t {
    return wl.proxy_get_version((^wl.Proxy)(wl_shm))
}

wl_buffer :: struct {}
wl_buffer_interface : wl.Interface
wl_buffer_set_user_data :: proc(wl_buffer : ^wl_buffer,user_data : rawptr){
    wl.proxy_set_user_data((^wl.Proxy)(wl_buffer), user_data)
}
wl_buffer_get_user_data :: proc(wl_buffer : ^wl_buffer) -> rawptr {
    return wl.proxy_get_user_data((^wl.Proxy)(wl_buffer))
}
wl_buffer_get_version :: proc(wl_buffer : ^wl_buffer) -> c.uint32_t {
    return wl.proxy_get_version((^wl.Proxy)(wl_buffer))
}

wl_data_offer :: struct {}
wl_data_offer_interface : wl.Interface
wl_data_offer_set_user_data :: proc(wl_data_offer : ^wl_data_offer,user_data : rawptr){
    wl.proxy_set_user_data((^wl.Proxy)(wl_data_offer), user_data)
}
wl_data_offer_get_user_data :: proc(wl_data_offer : ^wl_data_offer) -> rawptr {
    return wl.proxy_get_user_data((^wl.Proxy)(wl_data_offer))
}
wl_data_offer_get_version :: proc(wl_data_offer : ^wl_data_offer) -> c.uint32_t {
    return wl.proxy_get_version((^wl.Proxy)(wl_data_offer))
}

wl_data_source :: struct {}
wl_data_source_interface : wl.Interface
wl_data_source_set_user_data :: proc(wl_data_source : ^wl_data_source,user_data : rawptr){
    wl.proxy_set_user_data((^wl.Proxy)(wl_data_source), user_data)
}
wl_data_source_get_user_data :: proc(wl_data_source : ^wl_data_source) -> rawptr {
    return wl.proxy_get_user_data((^wl.Proxy)(wl_data_source))
}
wl_data_source_get_version :: proc(wl_data_source : ^wl_data_source) -> c.uint32_t {
    return wl.proxy_get_version((^wl.Proxy)(wl_data_source))
}

wl_data_device :: struct {}
wl_data_device_interface : wl.Interface
wl_data_device_set_user_data :: proc(wl_data_device : ^wl_data_device,user_data : rawptr){
    wl.proxy_set_user_data((^wl.Proxy)(wl_data_device), user_data)
}
wl_data_device_get_user_data :: proc(wl_data_device : ^wl_data_device) -> rawptr {
    return wl.proxy_get_user_data((^wl.Proxy)(wl_data_device))
}
wl_data_device_get_version :: proc(wl_data_device : ^wl_data_device) -> c.uint32_t {
    return wl.proxy_get_version((^wl.Proxy)(wl_data_device))
}

wl_data_device_manager :: struct {}
wl_data_device_manager_interface : wl.Interface
wl_data_device_manager_set_user_data :: proc(wl_data_device_manager : ^wl_data_device_manager,user_data : rawptr){
    wl.proxy_set_user_data((^wl.Proxy)(wl_data_device_manager), user_data)
}
wl_data_device_manager_get_user_data :: proc(wl_data_device_manager : ^wl_data_device_manager) -> rawptr {
    return wl.proxy_get_user_data((^wl.Proxy)(wl_data_device_manager))
}
wl_data_device_manager_get_version :: proc(wl_data_device_manager : ^wl_data_device_manager) -> c.uint32_t {
    return wl.proxy_get_version((^wl.Proxy)(wl_data_device_manager))
}

wl_shell :: struct {}
wl_shell_interface : wl.Interface
wl_shell_set_user_data :: proc(wl_shell : ^wl_shell,user_data : rawptr){
    wl.proxy_set_user_data((^wl.Proxy)(wl_shell), user_data)
}
wl_shell_get_user_data :: proc(wl_shell : ^wl_shell) -> rawptr {
    return wl.proxy_get_user_data((^wl.Proxy)(wl_shell))
}
wl_shell_get_version :: proc(wl_shell : ^wl_shell) -> c.uint32_t {
    return wl.proxy_get_version((^wl.Proxy)(wl_shell))
}

wl_shell_surface :: struct {}
wl_shell_surface_interface : wl.Interface
wl_shell_surface_set_user_data :: proc(wl_shell_surface : ^wl_shell_surface,user_data : rawptr){
    wl.proxy_set_user_data((^wl.Proxy)(wl_shell_surface), user_data)
}
wl_shell_surface_get_user_data :: proc(wl_shell_surface : ^wl_shell_surface) -> rawptr {
    return wl.proxy_get_user_data((^wl.Proxy)(wl_shell_surface))
}
wl_shell_surface_get_version :: proc(wl_shell_surface : ^wl_shell_surface) -> c.uint32_t {
    return wl.proxy_get_version((^wl.Proxy)(wl_shell_surface))
}

wl_surface :: struct {}
wl_surface_interface : wl.Interface
wl_surface_set_user_data :: proc(wl_surface : ^wl_surface,user_data : rawptr){
    wl.proxy_set_user_data((^wl.Proxy)(wl_surface), user_data)
}
wl_surface_get_user_data :: proc(wl_surface : ^wl_surface) -> rawptr {
    return wl.proxy_get_user_data((^wl.Proxy)(wl_surface))
}
wl_surface_get_version :: proc(wl_surface : ^wl_surface) -> c.uint32_t {
    return wl.proxy_get_version((^wl.Proxy)(wl_surface))
}

wl_seat :: struct {}
wl_seat_interface : wl.Interface
wl_seat_set_user_data :: proc(wl_seat : ^wl_seat,user_data : rawptr){
    wl.proxy_set_user_data((^wl.Proxy)(wl_seat), user_data)
}
wl_seat_get_user_data :: proc(wl_seat : ^wl_seat) -> rawptr {
    return wl.proxy_get_user_data((^wl.Proxy)(wl_seat))
}
wl_seat_get_version :: proc(wl_seat : ^wl_seat) -> c.uint32_t {
    return wl.proxy_get_version((^wl.Proxy)(wl_seat))
}

wl_pointer :: struct {}
wl_pointer_interface : wl.Interface
wl_pointer_set_user_data :: proc(wl_pointer : ^wl_pointer,user_data : rawptr){
    wl.proxy_set_user_data((^wl.Proxy)(wl_pointer), user_data)
}
wl_pointer_get_user_data :: proc(wl_pointer : ^wl_pointer) -> rawptr {
    return wl.proxy_get_user_data((^wl.Proxy)(wl_pointer))
}
wl_pointer_get_version :: proc(wl_pointer : ^wl_pointer) -> c.uint32_t {
    return wl.proxy_get_version((^wl.Proxy)(wl_pointer))
}

wl_keyboard :: struct {}
wl_keyboard_interface : wl.Interface
wl_keyboard_set_user_data :: proc(wl_keyboard : ^wl_keyboard,user_data : rawptr){
    wl.proxy_set_user_data((^wl.Proxy)(wl_keyboard), user_data)
}
wl_keyboard_get_user_data :: proc(wl_keyboard : ^wl_keyboard) -> rawptr {
    return wl.proxy_get_user_data((^wl.Proxy)(wl_keyboard))
}
wl_keyboard_get_version :: proc(wl_keyboard : ^wl_keyboard) -> c.uint32_t {
    return wl.proxy_get_version((^wl.Proxy)(wl_keyboard))
}

wl_touch :: struct {}
wl_touch_interface : wl.Interface
wl_touch_set_user_data :: proc(wl_touch : ^wl_touch,user_data : rawptr){
    wl.proxy_set_user_data((^wl.Proxy)(wl_touch), user_data)
}
wl_touch_get_user_data :: proc(wl_touch : ^wl_touch) -> rawptr {
    return wl.proxy_get_user_data((^wl.Proxy)(wl_touch))
}
wl_touch_get_version :: proc(wl_touch : ^wl_touch) -> c.uint32_t {
    return wl.proxy_get_version((^wl.Proxy)(wl_touch))
}

wl_output :: struct {}
wl_output_interface : wl.Interface
wl_output_set_user_data :: proc(wl_output : ^wl_output,user_data : rawptr){
    wl.proxy_set_user_data((^wl.Proxy)(wl_output), user_data)
}
wl_output_get_user_data :: proc(wl_output : ^wl_output) -> rawptr {
    return wl.proxy_get_user_data((^wl.Proxy)(wl_output))
}
wl_output_get_version :: proc(wl_output : ^wl_output) -> c.uint32_t {
    return wl.proxy_get_version((^wl.Proxy)(wl_output))
}

wl_region :: struct {}
wl_region_interface : wl.Interface
wl_region_set_user_data :: proc(wl_region : ^wl_region,user_data : rawptr){
    wl.proxy_set_user_data((^wl.Proxy)(wl_region), user_data)
}
wl_region_get_user_data :: proc(wl_region : ^wl_region) -> rawptr {
    return wl.proxy_get_user_data((^wl.Proxy)(wl_region))
}
wl_region_get_version :: proc(wl_region : ^wl_region) -> c.uint32_t {
    return wl.proxy_get_version((^wl.Proxy)(wl_region))
}

wl_subcompositor :: struct {}
wl_subcompositor_interface : wl.Interface
wl_subcompositor_set_user_data :: proc(wl_subcompositor : ^wl_subcompositor,user_data : rawptr){
    wl.proxy_set_user_data((^wl.Proxy)(wl_subcompositor), user_data)
}
wl_subcompositor_get_user_data :: proc(wl_subcompositor : ^wl_subcompositor) -> rawptr {
    return wl.proxy_get_user_data((^wl.Proxy)(wl_subcompositor))
}
wl_subcompositor_get_version :: proc(wl_subcompositor : ^wl_subcompositor) -> c.uint32_t {
    return wl.proxy_get_version((^wl.Proxy)(wl_subcompositor))
}

wl_subsurface :: struct {}
wl_subsurface_interface : wl.Interface
wl_subsurface_set_user_data :: proc(wl_subsurface : ^wl_subsurface,user_data : rawptr){
    wl.proxy_set_user_data((^wl.Proxy)(wl_subsurface), user_data)
}
wl_subsurface_get_user_data :: proc(wl_subsurface : ^wl_subsurface) -> rawptr {
    return wl.proxy_get_user_data((^wl.Proxy)(wl_subsurface))
}
wl_subsurface_get_version :: proc(wl_subsurface : ^wl_subsurface) -> c.uint32_t {
    return wl.proxy_get_version((^wl.Proxy)(wl_subsurface))
}

wl_fixes :: struct {}
wl_fixes_interface : wl.Interface
wl_fixes_set_user_data :: proc(wl_fixes : ^wl_fixes,user_data : rawptr){
    wl.proxy_set_user_data((^wl.Proxy)(wl_fixes), user_data)
}
wl_fixes_get_user_data :: proc(wl_fixes : ^wl_fixes) -> rawptr {
    return wl.proxy_get_user_data((^wl.Proxy)(wl_fixes))
}
wl_fixes_get_version :: proc(wl_fixes : ^wl_fixes) -> c.uint32_t {
    return wl.proxy_get_version((^wl.Proxy)(wl_fixes))
}

wl_display_sync :: proc(_wl_display: ^wl_display ) -> ^wl_callback{
    data: ^wl.Proxy
    data = wl.proxy_marshal_flags((^wl.Proxy)(_wl_display), 0, &wl_callback_interface,wl.proxy_get_version((^wl.Proxy)(_wl_display)), 0,nil)
    return (^wl_callback)(data)
}

wl_display_get_registry :: proc(_wl_display: ^wl_display ) -> ^wl_registry{
    data: ^wl.Proxy
    data = wl.proxy_marshal_flags((^wl.Proxy)(_wl_display), 1, &wl_registry_interface,wl.proxy_get_version((^wl.Proxy)(_wl_display)), 0,nil)
    return (^wl_registry)(data)
}

wl_registry_bind :: proc(_wl_registry: ^wl_registry,name: c.uint32_t, interface: ^wl.Interface, version: c.uint32_t ) -> rawptr{
    data: ^wl.Proxy
    data = wl.proxy_marshal_flags((^wl.Proxy)(_wl_registry), 0, interface,version,0, name, interface.name,version,nil)
    return (rawptr)(data)
}

wl_compositor_create_surface :: proc(_wl_compositor: ^wl_compositor ) -> ^wl_surface{
    data: ^wl.Proxy
    data = wl.proxy_marshal_flags((^wl.Proxy)(_wl_compositor), 0, &wl_surface_interface,wl.proxy_get_version((^wl.Proxy)(_wl_compositor)), 0,nil)
    return (^wl_surface)(data)
}

wl_compositor_create_region :: proc(_wl_compositor: ^wl_compositor ) -> ^wl_region{
    data: ^wl.Proxy
    data = wl.proxy_marshal_flags((^wl.Proxy)(_wl_compositor), 1, &wl_region_interface,wl.proxy_get_version((^wl.Proxy)(_wl_compositor)), 0,nil)
    return (^wl_region)(data)
}

wl_shm_pool_create_buffer :: proc(_wl_shm_pool: ^wl_shm_pool,offset: c.int32_t,width: c.int32_t,height: c.int32_t,stride: c.int32_t,format: c.uint32_t ) -> ^wl_buffer{
    data: ^wl.Proxy
    data = wl.proxy_marshal_flags((^wl.Proxy)(_wl_shm_pool), 0, &wl_buffer_interface,wl.proxy_get_version((^wl.Proxy)(_wl_shm_pool)), 0,nil, offset, width, height, stride, format)
    return (^wl_buffer)(data)
}

wl_shm_pool_destroy :: proc(_wl_shm_pool: ^wl_shm_pool){
    wl.proxy_marshal_flags((^wl.Proxy)(_wl_shm_pool), 1, nil, wl.proxy_get_version((^wl.Proxy)(_wl_shm_pool)), wl.MARSHAL_FLAG_DESTROY)
}

wl_shm_pool_resize :: proc(_wl_shm_pool: ^wl_shm_pool,size: c.int32_t ){
    wl.proxy_marshal_flags((^wl.Proxy)(_wl_shm_pool), 2, nil, wl.proxy_get_version((^wl.Proxy)(_wl_shm_pool)), 0, size)
}

wl_shm_create_pool :: proc(_wl_shm: ^wl_shm,fd: c.int32_t,size: c.int32_t ) -> ^wl_shm_pool{
    data: ^wl.Proxy
    data = wl.proxy_marshal_flags((^wl.Proxy)(_wl_shm), 0, &wl_shm_pool_interface,wl.proxy_get_version((^wl.Proxy)(_wl_shm)), 0,nil, fd, size)
    return (^wl_shm_pool)(data)
}

wl_shm_release :: proc(_wl_shm: ^wl_shm){
    wl.proxy_marshal_flags((^wl.Proxy)(_wl_shm), 1, nil, wl.proxy_get_version((^wl.Proxy)(_wl_shm)), wl.MARSHAL_FLAG_DESTROY)
}

wl_buffer_destroy :: proc(_wl_buffer: ^wl_buffer){
    wl.proxy_marshal_flags((^wl.Proxy)(_wl_buffer), 0, nil, wl.proxy_get_version((^wl.Proxy)(_wl_buffer)), wl.MARSHAL_FLAG_DESTROY)
}

wl_data_offer_accept :: proc(_wl_data_offer: ^wl_data_offer,serial: c.uint32_t,mime_type: cstring ){
    wl.proxy_marshal_flags((^wl.Proxy)(_wl_data_offer), 0, nil, wl.proxy_get_version((^wl.Proxy)(_wl_data_offer)), 0, serial, mime_type)
}

wl_data_offer_receive :: proc(_wl_data_offer: ^wl_data_offer,mime_type: cstring,fd: c.int32_t ){
    wl.proxy_marshal_flags((^wl.Proxy)(_wl_data_offer), 1, nil, wl.proxy_get_version((^wl.Proxy)(_wl_data_offer)), 0, mime_type, fd)
}

wl_data_offer_destroy :: proc(_wl_data_offer: ^wl_data_offer){
    wl.proxy_marshal_flags((^wl.Proxy)(_wl_data_offer), 2, nil, wl.proxy_get_version((^wl.Proxy)(_wl_data_offer)), wl.MARSHAL_FLAG_DESTROY)
}

wl_data_offer_finish :: proc(_wl_data_offer: ^wl_data_offer ){
    wl.proxy_marshal_flags((^wl.Proxy)(_wl_data_offer), 3, nil, wl.proxy_get_version((^wl.Proxy)(_wl_data_offer)), 0)
}

wl_data_offer_set_actions :: proc(_wl_data_offer: ^wl_data_offer,dnd_actions: c.uint32_t,preferred_action: c.uint32_t ){
    wl.proxy_marshal_flags((^wl.Proxy)(_wl_data_offer), 4, nil, wl.proxy_get_version((^wl.Proxy)(_wl_data_offer)), 0, dnd_actions, preferred_action)
}

wl_data_source_offer :: proc(_wl_data_source: ^wl_data_source,mime_type: cstring ){
    wl.proxy_marshal_flags((^wl.Proxy)(_wl_data_source), 0, nil, wl.proxy_get_version((^wl.Proxy)(_wl_data_source)), 0, mime_type)
}

wl_data_source_destroy :: proc(_wl_data_source: ^wl_data_source){
    wl.proxy_marshal_flags((^wl.Proxy)(_wl_data_source), 1, nil, wl.proxy_get_version((^wl.Proxy)(_wl_data_source)), wl.MARSHAL_FLAG_DESTROY)
}

wl_data_source_set_actions :: proc(_wl_data_source: ^wl_data_source,dnd_actions: c.uint32_t ){
    wl.proxy_marshal_flags((^wl.Proxy)(_wl_data_source), 2, nil, wl.proxy_get_version((^wl.Proxy)(_wl_data_source)), 0, dnd_actions)
}

wl_data_device_start_drag :: proc(_wl_data_device: ^wl_data_device,source: ^wl_data_source,origin: ^wl_surface,icon: ^wl_surface,serial: c.uint32_t ){
    wl.proxy_marshal_flags((^wl.Proxy)(_wl_data_device), 0, nil, wl.proxy_get_version((^wl.Proxy)(_wl_data_device)), 0, source, origin, icon, serial)
}

wl_data_device_set_selection :: proc(_wl_data_device: ^wl_data_device,source: ^wl_data_source,serial: c.uint32_t ){
    wl.proxy_marshal_flags((^wl.Proxy)(_wl_data_device), 1, nil, wl.proxy_get_version((^wl.Proxy)(_wl_data_device)), 0, source, serial)
}

wl_data_device_release :: proc(_wl_data_device: ^wl_data_device){
    wl.proxy_marshal_flags((^wl.Proxy)(_wl_data_device), 2, nil, wl.proxy_get_version((^wl.Proxy)(_wl_data_device)), wl.MARSHAL_FLAG_DESTROY)
}

wl_data_device_manager_create_data_source :: proc(_wl_data_device_manager: ^wl_data_device_manager ) -> ^wl_data_source{
    data: ^wl.Proxy
    data = wl.proxy_marshal_flags((^wl.Proxy)(_wl_data_device_manager), 0, &wl_data_source_interface,wl.proxy_get_version((^wl.Proxy)(_wl_data_device_manager)), 0,nil)
    return (^wl_data_source)(data)
}

wl_data_device_manager_get_data_device :: proc(_wl_data_device_manager: ^wl_data_device_manager,seat: ^wl_seat ) -> ^wl_data_device{
    data: ^wl.Proxy
    data = wl.proxy_marshal_flags((^wl.Proxy)(_wl_data_device_manager), 1, &wl_data_device_interface,wl.proxy_get_version((^wl.Proxy)(_wl_data_device_manager)), 0,nil, seat)
    return (^wl_data_device)(data)
}

wl_shell_get_shell_surface :: proc(_wl_shell: ^wl_shell,surface: ^wl_surface ) -> ^wl_shell_surface{
    data: ^wl.Proxy
    data = wl.proxy_marshal_flags((^wl.Proxy)(_wl_shell), 0, &wl_shell_surface_interface,wl.proxy_get_version((^wl.Proxy)(_wl_shell)), 0,nil, surface)
    return (^wl_shell_surface)(data)
}

wl_shell_surface_pong :: proc(_wl_shell_surface: ^wl_shell_surface,serial: c.uint32_t ){
    wl.proxy_marshal_flags((^wl.Proxy)(_wl_shell_surface), 0, nil, wl.proxy_get_version((^wl.Proxy)(_wl_shell_surface)), 0, serial)
}

wl_shell_surface_move :: proc(_wl_shell_surface: ^wl_shell_surface,seat: ^wl_seat,serial: c.uint32_t ){
    wl.proxy_marshal_flags((^wl.Proxy)(_wl_shell_surface), 1, nil, wl.proxy_get_version((^wl.Proxy)(_wl_shell_surface)), 0, seat, serial)
}

wl_shell_surface_resize :: proc(_wl_shell_surface: ^wl_shell_surface,seat: ^wl_seat,serial: c.uint32_t,edges: c.uint32_t ){
    wl.proxy_marshal_flags((^wl.Proxy)(_wl_shell_surface), 2, nil, wl.proxy_get_version((^wl.Proxy)(_wl_shell_surface)), 0, seat, serial, edges)
}

wl_shell_surface_set_toplevel :: proc(_wl_shell_surface: ^wl_shell_surface ){
    wl.proxy_marshal_flags((^wl.Proxy)(_wl_shell_surface), 3, nil, wl.proxy_get_version((^wl.Proxy)(_wl_shell_surface)), 0)
}

wl_shell_surface_set_transient :: proc(_wl_shell_surface: ^wl_shell_surface,parent: ^wl_surface,x: c.int32_t,y: c.int32_t,flags: c.uint32_t ){
    wl.proxy_marshal_flags((^wl.Proxy)(_wl_shell_surface), 4, nil, wl.proxy_get_version((^wl.Proxy)(_wl_shell_surface)), 0, parent, x, y, flags)
}

wl_shell_surface_set_fullscreen :: proc(_wl_shell_surface: ^wl_shell_surface,method: c.uint32_t,framerate: c.uint32_t,output: ^wl_output ){
    wl.proxy_marshal_flags((^wl.Proxy)(_wl_shell_surface), 5, nil, wl.proxy_get_version((^wl.Proxy)(_wl_shell_surface)), 0, method, framerate, output)
}

wl_shell_surface_set_popup :: proc(_wl_shell_surface: ^wl_shell_surface,seat: ^wl_seat,serial: c.uint32_t,parent: ^wl_surface,x: c.int32_t,y: c.int32_t,flags: c.uint32_t ){
    wl.proxy_marshal_flags((^wl.Proxy)(_wl_shell_surface), 6, nil, wl.proxy_get_version((^wl.Proxy)(_wl_shell_surface)), 0, seat, serial, parent, x, y, flags)
}

wl_shell_surface_set_maximized :: proc(_wl_shell_surface: ^wl_shell_surface,output: ^wl_output ){
    wl.proxy_marshal_flags((^wl.Proxy)(_wl_shell_surface), 7, nil, wl.proxy_get_version((^wl.Proxy)(_wl_shell_surface)), 0, output)
}

wl_shell_surface_set_title :: proc(_wl_shell_surface: ^wl_shell_surface,title: cstring ){
    wl.proxy_marshal_flags((^wl.Proxy)(_wl_shell_surface), 8, nil, wl.proxy_get_version((^wl.Proxy)(_wl_shell_surface)), 0, title)
}

wl_shell_surface_set_class :: proc(_wl_shell_surface: ^wl_shell_surface,class_: cstring ){
    wl.proxy_marshal_flags((^wl.Proxy)(_wl_shell_surface), 9, nil, wl.proxy_get_version((^wl.Proxy)(_wl_shell_surface)), 0, class_)
}

wl_surface_destroy :: proc(_wl_surface: ^wl_surface){
    wl.proxy_marshal_flags((^wl.Proxy)(_wl_surface), 0, nil, wl.proxy_get_version((^wl.Proxy)(_wl_surface)), wl.MARSHAL_FLAG_DESTROY)
}

wl_surface_attach :: proc(_wl_surface: ^wl_surface,buffer: ^wl_buffer,x: c.int32_t,y: c.int32_t ){
    wl.proxy_marshal_flags((^wl.Proxy)(_wl_surface), 1, nil, wl.proxy_get_version((^wl.Proxy)(_wl_surface)), 0, buffer, x, y)
}

wl_surface_damage :: proc(_wl_surface: ^wl_surface,x: c.int32_t,y: c.int32_t,width: c.int32_t,height: c.int32_t ){
    wl.proxy_marshal_flags((^wl.Proxy)(_wl_surface), 2, nil, wl.proxy_get_version((^wl.Proxy)(_wl_surface)), 0, x, y, width, height)
}

wl_surface_frame :: proc(_wl_surface: ^wl_surface ) -> ^wl_callback{
    data: ^wl.Proxy
    data = wl.proxy_marshal_flags((^wl.Proxy)(_wl_surface), 3, &wl_callback_interface,wl.proxy_get_version((^wl.Proxy)(_wl_surface)), 0,nil)
    return (^wl_callback)(data)
}

wl_surface_set_opaque_region :: proc(_wl_surface: ^wl_surface,region: ^wl_region ){
    wl.proxy_marshal_flags((^wl.Proxy)(_wl_surface), 4, nil, wl.proxy_get_version((^wl.Proxy)(_wl_surface)), 0, region)
}

wl_surface_set_input_region :: proc(_wl_surface: ^wl_surface,region: ^wl_region ){
    wl.proxy_marshal_flags((^wl.Proxy)(_wl_surface), 5, nil, wl.proxy_get_version((^wl.Proxy)(_wl_surface)), 0, region)
}

wl_surface_commit :: proc(_wl_surface: ^wl_surface ){
    wl.proxy_marshal_flags((^wl.Proxy)(_wl_surface), 6, nil, wl.proxy_get_version((^wl.Proxy)(_wl_surface)), 0)
}

wl_surface_set_buffer_transform :: proc(_wl_surface: ^wl_surface,transform: c.int32_t ){
    wl.proxy_marshal_flags((^wl.Proxy)(_wl_surface), 7, nil, wl.proxy_get_version((^wl.Proxy)(_wl_surface)), 0, transform)
}

wl_surface_set_buffer_scale :: proc(_wl_surface: ^wl_surface,scale: c.int32_t ){
    wl.proxy_marshal_flags((^wl.Proxy)(_wl_surface), 8, nil, wl.proxy_get_version((^wl.Proxy)(_wl_surface)), 0, scale)
}

wl_surface_damage_buffer :: proc(_wl_surface: ^wl_surface,x: c.int32_t,y: c.int32_t,width: c.int32_t,height: c.int32_t ){
    wl.proxy_marshal_flags((^wl.Proxy)(_wl_surface), 9, nil, wl.proxy_get_version((^wl.Proxy)(_wl_surface)), 0, x, y, width, height)
}

wl_surface_offset :: proc(_wl_surface: ^wl_surface,x: c.int32_t,y: c.int32_t ){
    wl.proxy_marshal_flags((^wl.Proxy)(_wl_surface), 10, nil, wl.proxy_get_version((^wl.Proxy)(_wl_surface)), 0, x, y)
}

wl_seat_get_pointer :: proc(_wl_seat: ^wl_seat ) -> ^wl_pointer{
    data: ^wl.Proxy
    data = wl.proxy_marshal_flags((^wl.Proxy)(_wl_seat), 0, &wl_pointer_interface,wl.proxy_get_version((^wl.Proxy)(_wl_seat)), 0,nil)
    return (^wl_pointer)(data)
}

wl_seat_get_keyboard :: proc(_wl_seat: ^wl_seat ) -> ^wl_keyboard{
    data: ^wl.Proxy
    data = wl.proxy_marshal_flags((^wl.Proxy)(_wl_seat), 1, &wl_keyboard_interface,wl.proxy_get_version((^wl.Proxy)(_wl_seat)), 0,nil)
    return (^wl_keyboard)(data)
}

wl_seat_get_touch :: proc(_wl_seat: ^wl_seat ) -> ^wl_touch{
    data: ^wl.Proxy
    data = wl.proxy_marshal_flags((^wl.Proxy)(_wl_seat), 2, &wl_touch_interface,wl.proxy_get_version((^wl.Proxy)(_wl_seat)), 0,nil)
    return (^wl_touch)(data)
}

wl_seat_release :: proc(_wl_seat: ^wl_seat){
    wl.proxy_marshal_flags((^wl.Proxy)(_wl_seat), 3, nil, wl.proxy_get_version((^wl.Proxy)(_wl_seat)), wl.MARSHAL_FLAG_DESTROY)
}

wl_pointer_set_cursor :: proc(_wl_pointer: ^wl_pointer,serial: c.uint32_t,surface: ^wl_surface,hotspot_x: c.int32_t,hotspot_y: c.int32_t ){
    wl.proxy_marshal_flags((^wl.Proxy)(_wl_pointer), 0, nil, wl.proxy_get_version((^wl.Proxy)(_wl_pointer)), 0, serial, surface, hotspot_x, hotspot_y)
}

wl_pointer_release :: proc(_wl_pointer: ^wl_pointer){
    wl.proxy_marshal_flags((^wl.Proxy)(_wl_pointer), 1, nil, wl.proxy_get_version((^wl.Proxy)(_wl_pointer)), wl.MARSHAL_FLAG_DESTROY)
}

wl_keyboard_release :: proc(_wl_keyboard: ^wl_keyboard){
    wl.proxy_marshal_flags((^wl.Proxy)(_wl_keyboard), 0, nil, wl.proxy_get_version((^wl.Proxy)(_wl_keyboard)), wl.MARSHAL_FLAG_DESTROY)
}

wl_touch_release :: proc(_wl_touch: ^wl_touch){
    wl.proxy_marshal_flags((^wl.Proxy)(_wl_touch), 0, nil, wl.proxy_get_version((^wl.Proxy)(_wl_touch)), wl.MARSHAL_FLAG_DESTROY)
}

wl_output_release :: proc(_wl_output: ^wl_output){
    wl.proxy_marshal_flags((^wl.Proxy)(_wl_output), 0, nil, wl.proxy_get_version((^wl.Proxy)(_wl_output)), wl.MARSHAL_FLAG_DESTROY)
}

wl_region_destroy :: proc(_wl_region: ^wl_region){
    wl.proxy_marshal_flags((^wl.Proxy)(_wl_region), 0, nil, wl.proxy_get_version((^wl.Proxy)(_wl_region)), wl.MARSHAL_FLAG_DESTROY)
}

wl_region_add :: proc(_wl_region: ^wl_region,x: c.int32_t,y: c.int32_t,width: c.int32_t,height: c.int32_t ){
    wl.proxy_marshal_flags((^wl.Proxy)(_wl_region), 1, nil, wl.proxy_get_version((^wl.Proxy)(_wl_region)), 0, x, y, width, height)
}

wl_region_subtract :: proc(_wl_region: ^wl_region,x: c.int32_t,y: c.int32_t,width: c.int32_t,height: c.int32_t ){
    wl.proxy_marshal_flags((^wl.Proxy)(_wl_region), 2, nil, wl.proxy_get_version((^wl.Proxy)(_wl_region)), 0, x, y, width, height)
}

wl_subcompositor_destroy :: proc(_wl_subcompositor: ^wl_subcompositor){
    wl.proxy_marshal_flags((^wl.Proxy)(_wl_subcompositor), 0, nil, wl.proxy_get_version((^wl.Proxy)(_wl_subcompositor)), wl.MARSHAL_FLAG_DESTROY)
}

wl_subcompositor_get_subsurface :: proc(_wl_subcompositor: ^wl_subcompositor,surface: ^wl_surface,parent: ^wl_surface ) -> ^wl_subsurface{
    data: ^wl.Proxy
    data = wl.proxy_marshal_flags((^wl.Proxy)(_wl_subcompositor), 1, &wl_subsurface_interface,wl.proxy_get_version((^wl.Proxy)(_wl_subcompositor)), 0,nil, surface, parent)
    return (^wl_subsurface)(data)
}

wl_subsurface_destroy :: proc(_wl_subsurface: ^wl_subsurface){
    wl.proxy_marshal_flags((^wl.Proxy)(_wl_subsurface), 0, nil, wl.proxy_get_version((^wl.Proxy)(_wl_subsurface)), wl.MARSHAL_FLAG_DESTROY)
}

wl_subsurface_set_position :: proc(_wl_subsurface: ^wl_subsurface,x: c.int32_t,y: c.int32_t ){
    wl.proxy_marshal_flags((^wl.Proxy)(_wl_subsurface), 1, nil, wl.proxy_get_version((^wl.Proxy)(_wl_subsurface)), 0, x, y)
}

wl_subsurface_place_above :: proc(_wl_subsurface: ^wl_subsurface,sibling: ^wl_surface ){
    wl.proxy_marshal_flags((^wl.Proxy)(_wl_subsurface), 2, nil, wl.proxy_get_version((^wl.Proxy)(_wl_subsurface)), 0, sibling)
}

wl_subsurface_place_below :: proc(_wl_subsurface: ^wl_subsurface,sibling: ^wl_surface ){
    wl.proxy_marshal_flags((^wl.Proxy)(_wl_subsurface), 3, nil, wl.proxy_get_version((^wl.Proxy)(_wl_subsurface)), 0, sibling)
}

wl_subsurface_set_sync :: proc(_wl_subsurface: ^wl_subsurface ){
    wl.proxy_marshal_flags((^wl.Proxy)(_wl_subsurface), 4, nil, wl.proxy_get_version((^wl.Proxy)(_wl_subsurface)), 0)
}

wl_subsurface_set_desync :: proc(_wl_subsurface: ^wl_subsurface ){
    wl.proxy_marshal_flags((^wl.Proxy)(_wl_subsurface), 5, nil, wl.proxy_get_version((^wl.Proxy)(_wl_subsurface)), 0)
}

wl_fixes_destroy :: proc(_wl_fixes: ^wl_fixes){
    wl.proxy_marshal_flags((^wl.Proxy)(_wl_fixes), 0, nil, wl.proxy_get_version((^wl.Proxy)(_wl_fixes)), wl.MARSHAL_FLAG_DESTROY)
}

wl_fixes_destroy_registry :: proc(_wl_fixes: ^wl_fixes,registry: ^wl_registry ){
    wl.proxy_marshal_flags((^wl.Proxy)(_wl_fixes), 1, nil, wl.proxy_get_version((^wl.Proxy)(_wl_fixes)), 0, registry)
}

wl_display_add_listener :: proc(wl_display : ^wl_display, listener: ^wl_display_listener, data: rawptr) -> c.int {
    return wl.proxy_add_listener((^wl.Proxy)(wl_display), (^rawptr)(listener),data)
}
wl_display_listener :: struct {
    error : proc(data:rawptr,wl_display: ^wl_display ,object_id : rawptr ,code : c.uint32_t ,message : cstring),
    delete_id : proc(data:rawptr,wl_display: ^wl_display ,id : c.uint32_t),

}

wl_registry_add_listener :: proc(wl_registry : ^wl_registry, listener: ^wl_registry_listener, data: rawptr) -> c.int {
    return wl.proxy_add_listener((^wl.Proxy)(wl_registry), (^rawptr)(listener),data)
}
wl_registry_listener :: struct {
    global : proc(data:rawptr,wl_registry: ^wl_registry ,name : c.uint32_t ,interface : cstring ,version : c.uint32_t),
    global_remove : proc(data:rawptr,wl_registry: ^wl_registry ,name : c.uint32_t),

}

wl_callback_add_listener :: proc(wl_callback : ^wl_callback, listener: ^wl_callback_listener, data: rawptr) -> c.int {
    return wl.proxy_add_listener((^wl.Proxy)(wl_callback), (^rawptr)(listener),data)
}
wl_callback_listener :: struct {
    done : proc(data:rawptr,wl_callback: ^wl_callback ,callback_data : c.uint32_t),

}

wl_shm_add_listener :: proc(wl_shm : ^wl_shm, listener: ^wl_shm_listener, data: rawptr) -> c.int {
    return wl.proxy_add_listener((^wl.Proxy)(wl_shm), (^rawptr)(listener),data)
}
wl_shm_listener :: struct {
    format : proc(data:rawptr,wl_shm: ^wl_shm ,format : c.uint32_t),

}

wl_buffer_add_listener :: proc(wl_buffer : ^wl_buffer, listener: ^wl_buffer_listener, data: rawptr) -> c.int {
    return wl.proxy_add_listener((^wl.Proxy)(wl_buffer), (^rawptr)(listener),data)
}
wl_buffer_listener :: struct {
    release : proc(data:rawptr,wl_buffer: ^wl_buffer),

}

wl_data_offer_add_listener :: proc(wl_data_offer : ^wl_data_offer, listener: ^wl_data_offer_listener, data: rawptr) -> c.int {
    return wl.proxy_add_listener((^wl.Proxy)(wl_data_offer), (^rawptr)(listener),data)
}
wl_data_offer_listener :: struct {
    offer : proc(data:rawptr,wl_data_offer: ^wl_data_offer ,mime_type : cstring),
    source_actions : proc(data:rawptr,wl_data_offer: ^wl_data_offer ,source_actions : c.uint32_t),
    action : proc(data:rawptr,wl_data_offer: ^wl_data_offer ,dnd_action : c.uint32_t),

}

wl_data_source_add_listener :: proc(wl_data_source : ^wl_data_source, listener: ^wl_data_source_listener, data: rawptr) -> c.int {
    return wl.proxy_add_listener((^wl.Proxy)(wl_data_source), (^rawptr)(listener),data)
}
wl_data_source_listener :: struct {
    target : proc(data:rawptr,wl_data_source: ^wl_data_source ,mime_type : cstring),
    send : proc(data:rawptr,wl_data_source: ^wl_data_source ,mime_type : cstring ,fd : c.int32_t),
    cancelled : proc(data:rawptr,wl_data_source: ^wl_data_source),
    dnd_drop_performed : proc(data:rawptr,wl_data_source: ^wl_data_source),
    dnd_finished : proc(data:rawptr,wl_data_source: ^wl_data_source),
    action : proc(data:rawptr,wl_data_source: ^wl_data_source ,dnd_action : c.uint32_t),

}

wl_data_device_add_listener :: proc(wl_data_device : ^wl_data_device, listener: ^wl_data_device_listener, data: rawptr) -> c.int {
    return wl.proxy_add_listener((^wl.Proxy)(wl_data_device), (^rawptr)(listener),data)
}
wl_data_device_listener :: struct {
    data_offer : proc(data:rawptr,wl_data_device: ^wl_data_device ,id : c.uint32_t),
    enter : proc(data:rawptr,wl_data_device: ^wl_data_device ,serial : c.uint32_t ,surface : ^wl_surface ,x : wl.Fixed ,y : wl.Fixed ,id : ^wl_data_offer),
    leave : proc(data:rawptr,wl_data_device: ^wl_data_device),
    motion : proc(data:rawptr,wl_data_device: ^wl_data_device ,time : c.uint32_t ,x : wl.Fixed ,y : wl.Fixed),
    drop : proc(data:rawptr,wl_data_device: ^wl_data_device),
    selection : proc(data:rawptr,wl_data_device: ^wl_data_device ,id : ^wl_data_offer),

}

wl_shell_surface_add_listener :: proc(wl_shell_surface : ^wl_shell_surface, listener: ^wl_shell_surface_listener, data: rawptr) -> c.int {
    return wl.proxy_add_listener((^wl.Proxy)(wl_shell_surface), (^rawptr)(listener),data)
}
wl_shell_surface_listener :: struct {
    ping : proc(data:rawptr,wl_shell_surface: ^wl_shell_surface ,serial : c.uint32_t),
    configure : proc(data:rawptr,wl_shell_surface: ^wl_shell_surface ,edges : c.uint32_t ,width : c.int32_t ,height : c.int32_t),
    popup_done : proc(data:rawptr,wl_shell_surface: ^wl_shell_surface),

}

wl_surface_add_listener :: proc(wl_surface : ^wl_surface, listener: ^wl_surface_listener, data: rawptr) -> c.int {
    return wl.proxy_add_listener((^wl.Proxy)(wl_surface), (^rawptr)(listener),data)
}
wl_surface_listener :: struct {
    enter : proc(data:rawptr,wl_surface: ^wl_surface ,output : ^wl_output),
    leave : proc(data:rawptr,wl_surface: ^wl_surface ,output : ^wl_output),
    preferred_buffer_scale : proc(data:rawptr,wl_surface: ^wl_surface ,factor : c.int32_t),
    preferred_buffer_transform : proc(data:rawptr,wl_surface: ^wl_surface ,transform : c.uint32_t),

}

wl_seat_add_listener :: proc(wl_seat : ^wl_seat, listener: ^wl_seat_listener, data: rawptr) -> c.int {
    return wl.proxy_add_listener((^wl.Proxy)(wl_seat), (^rawptr)(listener),data)
}
wl_seat_listener :: struct {
    capabilities : proc(data:rawptr,wl_seat: ^wl_seat ,capabilities : c.uint32_t),
    name : proc(data:rawptr,wl_seat: ^wl_seat ,name : cstring),

}

wl_pointer_add_listener :: proc(wl_pointer : ^wl_pointer, listener: ^wl_pointer_listener, data: rawptr) -> c.int {
    return wl.proxy_add_listener((^wl.Proxy)(wl_pointer), (^rawptr)(listener),data)
}
wl_pointer_listener :: struct {
    enter : proc(data:rawptr,wl_pointer: ^wl_pointer ,serial : c.uint32_t ,surface : ^wl_surface ,surface_x : wl.Fixed ,surface_y : wl.Fixed),
    leave : proc(data:rawptr,wl_pointer: ^wl_pointer ,serial : c.uint32_t ,surface : ^wl_surface),
    motion : proc(data:rawptr,wl_pointer: ^wl_pointer ,time : c.uint32_t ,surface_x : wl.Fixed ,surface_y : wl.Fixed),
    button : proc(data:rawptr,wl_pointer: ^wl_pointer ,serial : c.uint32_t ,time : c.uint32_t ,button : c.uint32_t ,state : c.uint32_t),
    axis : proc(data:rawptr,wl_pointer: ^wl_pointer ,time : c.uint32_t ,axis : c.uint32_t ,value : wl.Fixed),
    frame : proc(data:rawptr,wl_pointer: ^wl_pointer),
    axis_source : proc(data:rawptr,wl_pointer: ^wl_pointer ,axis_source : c.uint32_t),
    axis_stop : proc(data:rawptr,wl_pointer: ^wl_pointer ,time : c.uint32_t ,axis : c.uint32_t),
    axis_discrete : proc(data:rawptr,wl_pointer: ^wl_pointer ,axis : c.uint32_t ,discrete : c.int32_t),
    axis_value120 : proc(data:rawptr,wl_pointer: ^wl_pointer ,axis : c.uint32_t ,value120 : c.int32_t),
    axis_relative_direction : proc(data:rawptr,wl_pointer: ^wl_pointer ,axis : c.uint32_t ,direction : c.uint32_t),

}

wl_keyboard_add_listener :: proc(wl_keyboard : ^wl_keyboard, listener: ^wl_keyboard_listener, data: rawptr) -> c.int {
    return wl.proxy_add_listener((^wl.Proxy)(wl_keyboard), (^rawptr)(listener),data)
}
wl_keyboard_listener :: struct {
    keymap : proc(data:rawptr,wl_keyboard: ^wl_keyboard ,format : c.uint32_t ,fd : c.int32_t ,size : c.uint32_t),
    enter : proc(data:rawptr,wl_keyboard: ^wl_keyboard ,serial : c.uint32_t ,surface : ^wl_surface ,keys : ^wl.Array),
    leave : proc(data:rawptr,wl_keyboard: ^wl_keyboard ,serial : c.uint32_t ,surface : ^wl_surface),
    key : proc(data:rawptr,wl_keyboard: ^wl_keyboard ,serial : c.uint32_t ,time : c.uint32_t ,key : c.uint32_t ,state : c.uint32_t),
    modifiers : proc(data:rawptr,wl_keyboard: ^wl_keyboard ,serial : c.uint32_t ,mods_depressed : c.uint32_t ,mods_latched : c.uint32_t ,mods_locked : c.uint32_t ,group : c.uint32_t),
    repeat_info : proc(data:rawptr,wl_keyboard: ^wl_keyboard ,rate : c.int32_t ,delay : c.int32_t),

}

wl_touch_add_listener :: proc(wl_touch : ^wl_touch, listener: ^wl_touch_listener, data: rawptr) -> c.int {
    return wl.proxy_add_listener((^wl.Proxy)(wl_touch), (^rawptr)(listener),data)
}
wl_touch_listener :: struct {
    down : proc(data:rawptr,wl_touch: ^wl_touch ,serial : c.uint32_t ,time : c.uint32_t ,surface : ^wl_surface ,id : c.int32_t ,x : wl.Fixed ,y : wl.Fixed),
    up : proc(data:rawptr,wl_touch: ^wl_touch ,serial : c.uint32_t ,time : c.uint32_t ,id : c.int32_t),
    motion : proc(data:rawptr,wl_touch: ^wl_touch ,time : c.uint32_t ,id : c.int32_t ,x : wl.Fixed ,y : wl.Fixed),
    frame : proc(data:rawptr,wl_touch: ^wl_touch),
    cancel : proc(data:rawptr,wl_touch: ^wl_touch),
    shape : proc(data:rawptr,wl_touch: ^wl_touch ,id : c.int32_t ,major : wl.Fixed ,minor : wl.Fixed),
    orientation : proc(data:rawptr,wl_touch: ^wl_touch ,id : c.int32_t ,orientation : wl.Fixed),

}

wl_output_add_listener :: proc(wl_output : ^wl_output, listener: ^wl_output_listener, data: rawptr) -> c.int {
    return wl.proxy_add_listener((^wl.Proxy)(wl_output), (^rawptr)(listener),data)
}
wl_output_listener :: struct {
    geometry : proc(data:rawptr,wl_output: ^wl_output ,x : c.int32_t ,y : c.int32_t ,physical_width : c.int32_t ,physical_height : c.int32_t ,subpixel : c.int32_t ,make : cstring ,model : cstring ,transform : c.int32_t),
    mode : proc(data:rawptr,wl_output: ^wl_output ,flags : c.uint32_t ,width : c.int32_t ,height : c.int32_t ,refresh : c.int32_t),
    done : proc(data:rawptr,wl_output: ^wl_output),
    scale : proc(data:rawptr,wl_output: ^wl_output ,factor : c.int32_t),
    name : proc(data:rawptr,wl_output: ^wl_output ,name : cstring),
    description : proc(data:rawptr,wl_output: ^wl_output ,description : cstring),

}

wl_display_error_enum :: enum c.int32_t{
    wl_display_error_invalid_object = 0,
    wl_display_error_invalid_method = 1,
    wl_display_error_no_memory = 2,
    wl_display_error_implementation = 3,
}

wl_shm_error_enum :: enum c.int32_t{
    wl_shm_error_invalid_format = 0,
    wl_shm_error_invalid_stride = 1,
    wl_shm_error_invalid_fd = 2,
}

wl_shm_format_enum :: enum c.int32_t{
    wl_shm_format_argb8888 = 0,
    wl_shm_format_xrgb8888 = 1,
    wl_shm_format_c8 = 0x20203843,
    wl_shm_format_rgb332 = 0x38424752,
    wl_shm_format_bgr233 = 0x38524742,
    wl_shm_format_xrgb4444 = 0x32315258,
    wl_shm_format_xbgr4444 = 0x32314258,
    wl_shm_format_rgbx4444 = 0x32315852,
    wl_shm_format_bgrx4444 = 0x32315842,
    wl_shm_format_argb4444 = 0x32315241,
    wl_shm_format_abgr4444 = 0x32314241,
    wl_shm_format_rgba4444 = 0x32314152,
    wl_shm_format_bgra4444 = 0x32314142,
    wl_shm_format_xrgb1555 = 0x35315258,
    wl_shm_format_xbgr1555 = 0x35314258,
    wl_shm_format_rgbx5551 = 0x35315852,
    wl_shm_format_bgrx5551 = 0x35315842,
    wl_shm_format_argb1555 = 0x35315241,
    wl_shm_format_abgr1555 = 0x35314241,
    wl_shm_format_rgba5551 = 0x35314152,
    wl_shm_format_bgra5551 = 0x35314142,
    wl_shm_format_rgb565 = 0x36314752,
    wl_shm_format_bgr565 = 0x36314742,
    wl_shm_format_rgb888 = 0x34324752,
    wl_shm_format_bgr888 = 0x34324742,
    wl_shm_format_xbgr8888 = 0x34324258,
    wl_shm_format_rgbx8888 = 0x34325852,
    wl_shm_format_bgrx8888 = 0x34325842,
    wl_shm_format_abgr8888 = 0x34324241,
    wl_shm_format_rgba8888 = 0x34324152,
    wl_shm_format_bgra8888 = 0x34324142,
    wl_shm_format_xrgb2101010 = 0x30335258,
    wl_shm_format_xbgr2101010 = 0x30334258,
    wl_shm_format_rgbx1010102 = 0x30335852,
    wl_shm_format_bgrx1010102 = 0x30335842,
    wl_shm_format_argb2101010 = 0x30335241,
    wl_shm_format_abgr2101010 = 0x30334241,
    wl_shm_format_rgba1010102 = 0x30334152,
    wl_shm_format_bgra1010102 = 0x30334142,
    wl_shm_format_yuyv = 0x56595559,
    wl_shm_format_yvyu = 0x55595659,
    wl_shm_format_uyvy = 0x59565955,
    wl_shm_format_vyuy = 0x59555956,
    wl_shm_format_ayuv = 0x56555941,
    wl_shm_format_nv12 = 0x3231564e,
    wl_shm_format_nv21 = 0x3132564e,
    wl_shm_format_nv16 = 0x3631564e,
    wl_shm_format_nv61 = 0x3136564e,
    wl_shm_format_yuv410 = 0x39565559,
    wl_shm_format_yvu410 = 0x39555659,
    wl_shm_format_yuv411 = 0x31315559,
    wl_shm_format_yvu411 = 0x31315659,
    wl_shm_format_yuv420 = 0x32315559,
    wl_shm_format_yvu420 = 0x32315659,
    wl_shm_format_yuv422 = 0x36315559,
    wl_shm_format_yvu422 = 0x36315659,
    wl_shm_format_yuv444 = 0x34325559,
    wl_shm_format_yvu444 = 0x34325659,
    wl_shm_format_r8 = 0x20203852,
    wl_shm_format_r16 = 0x20363152,
    wl_shm_format_rg88 = 0x38384752,
    wl_shm_format_gr88 = 0x38385247,
    wl_shm_format_rg1616 = 0x32334752,
    wl_shm_format_gr1616 = 0x32335247,
    wl_shm_format_xrgb16161616f = 0x48345258,
    wl_shm_format_xbgr16161616f = 0x48344258,
    wl_shm_format_argb16161616f = 0x48345241,
    wl_shm_format_abgr16161616f = 0x48344241,
    wl_shm_format_xyuv8888 = 0x56555958,
    wl_shm_format_vuy888 = 0x34325556,
    wl_shm_format_vuy101010 = 0x30335556,
    wl_shm_format_y210 = 0x30313259,
    wl_shm_format_y212 = 0x32313259,
    wl_shm_format_y216 = 0x36313259,
    wl_shm_format_y410 = 0x30313459,
    wl_shm_format_y412 = 0x32313459,
    wl_shm_format_y416 = 0x36313459,
    wl_shm_format_xvyu2101010 = 0x30335658,
    wl_shm_format_xvyu12_16161616 = 0x36335658,
    wl_shm_format_xvyu16161616 = 0x38345658,
    wl_shm_format_y0l0 = 0x304c3059,
    wl_shm_format_x0l0 = 0x304c3058,
    wl_shm_format_y0l2 = 0x324c3059,
    wl_shm_format_x0l2 = 0x324c3058,
    wl_shm_format_yuv420_8bit = 0x38305559,
    wl_shm_format_yuv420_10bit = 0x30315559,
    wl_shm_format_xrgb8888_a8 = 0x38415258,
    wl_shm_format_xbgr8888_a8 = 0x38414258,
    wl_shm_format_rgbx8888_a8 = 0x38415852,
    wl_shm_format_bgrx8888_a8 = 0x38415842,
    wl_shm_format_rgb888_a8 = 0x38413852,
    wl_shm_format_bgr888_a8 = 0x38413842,
    wl_shm_format_rgb565_a8 = 0x38413552,
    wl_shm_format_bgr565_a8 = 0x38413542,
    wl_shm_format_nv24 = 0x3432564e,
    wl_shm_format_nv42 = 0x3234564e,
    wl_shm_format_p210 = 0x30313250,
    wl_shm_format_p010 = 0x30313050,
    wl_shm_format_p012 = 0x32313050,
    wl_shm_format_p016 = 0x36313050,
    wl_shm_format_axbxgxrx106106106106 = 0x30314241,
    wl_shm_format_nv15 = 0x3531564e,
    wl_shm_format_q410 = 0x30313451,
    wl_shm_format_q401 = 0x31303451,
    wl_shm_format_xrgb16161616 = 0x38345258,
    wl_shm_format_xbgr16161616 = 0x38344258,
    wl_shm_format_argb16161616 = 0x38345241,
    wl_shm_format_abgr16161616 = 0x38344241,
    wl_shm_format_c1 = 0x20203143,
    wl_shm_format_c2 = 0x20203243,
    wl_shm_format_c4 = 0x20203443,
    wl_shm_format_d1 = 0x20203144,
    wl_shm_format_d2 = 0x20203244,
    wl_shm_format_d4 = 0x20203444,
    wl_shm_format_d8 = 0x20203844,
    wl_shm_format_r1 = 0x20203152,
    wl_shm_format_r2 = 0x20203252,
    wl_shm_format_r4 = 0x20203452,
    wl_shm_format_r10 = 0x20303152,
    wl_shm_format_r12 = 0x20323152,
    wl_shm_format_avuy8888 = 0x59555641,
    wl_shm_format_xvuy8888 = 0x59555658,
    wl_shm_format_p030 = 0x30333050,
}

wl_data_offer_error_enum :: enum c.int32_t{
    wl_data_offer_error_invalid_finish = 0,
    wl_data_offer_error_invalid_action_mask = 1,
    wl_data_offer_error_invalid_action = 2,
    wl_data_offer_error_invalid_offer = 3,
}

wl_data_source_error_enum :: enum c.int32_t{
    wl_data_source_error_invalid_action_mask = 0,
    wl_data_source_error_invalid_source = 1,
}

wl_data_device_error_enum :: enum c.int32_t{
    wl_data_device_error_role = 0,
    wl_data_device_error_used_source = 1,
}

wl_data_device_manager_dnd_action_enum :: enum c.int32_t{
    wl_data_device_manager_dnd_action_none = 0,
    wl_data_device_manager_dnd_action_copy = 1,
    wl_data_device_manager_dnd_action_move = 2,
    wl_data_device_manager_dnd_action_ask = 4,
}

wl_shell_error_enum :: enum c.int32_t{
    wl_shell_error_role = 0,
}

wl_shell_surface_resize_enum :: enum c.int32_t{
    wl_shell_surface_resize_none = 0,
    wl_shell_surface_resize_top = 1,
    wl_shell_surface_resize_bottom = 2,
    wl_shell_surface_resize_left = 4,
    wl_shell_surface_resize_top_left = 5,
    wl_shell_surface_resize_bottom_left = 6,
    wl_shell_surface_resize_right = 8,
    wl_shell_surface_resize_top_right = 9,
    wl_shell_surface_resize_bottom_right = 10,
}

wl_shell_surface_transient_enum :: enum c.int32_t{
    wl_shell_surface_transient_inactive = 0x1,
}

wl_shell_surface_fullscreen_method_enum :: enum c.int32_t{
    wl_shell_surface_fullscreen_method_default = 0,
    wl_shell_surface_fullscreen_method_scale = 1,
    wl_shell_surface_fullscreen_method_driver = 2,
    wl_shell_surface_fullscreen_method_fill = 3,
}

wl_surface_error_enum :: enum c.int32_t{
    wl_surface_error_invalid_scale = 0,
    wl_surface_error_invalid_transform = 1,
    wl_surface_error_invalid_size = 2,
    wl_surface_error_invalid_offset = 3,
    wl_surface_error_defunct_role_object = 4,
}

wl_seat_capability_enum :: enum c.int32_t{
    wl_seat_capability_pointer = 1,
    wl_seat_capability_keyboard = 2,
    wl_seat_capability_touch = 4,
}

wl_seat_error_enum :: enum c.int32_t{
    wl_seat_error_missing_capability = 0,
}

wl_pointer_error_enum :: enum c.int32_t{
    wl_pointer_error_role = 0,
}

wl_pointer_button_state_enum :: enum c.int32_t{
    wl_pointer_button_state_released = 0,
    wl_pointer_button_state_pressed = 1,
}

wl_pointer_axis_enum :: enum c.int32_t{
    wl_pointer_axis_vertical_scroll = 0,
    wl_pointer_axis_horizontal_scroll = 1,
}

wl_pointer_axis_source_enum :: enum c.int32_t{
    wl_pointer_axis_source_wheel = 0,
    wl_pointer_axis_source_finger = 1,
    wl_pointer_axis_source_continuous = 2,
    wl_pointer_axis_source_wheel_tilt = 3,
}

wl_pointer_axis_relative_direction_enum :: enum c.int32_t{
    wl_pointer_axis_relative_direction_identical = 0,
    wl_pointer_axis_relative_direction_inverted = 1,
}

wl_keyboard_keymap_format_enum :: enum c.int32_t{
    wl_keyboard_keymap_format_no_keymap = 0,
    wl_keyboard_keymap_format_xkb_v1 = 1,
}

wl_keyboard_key_state_enum :: enum c.int32_t{
    wl_keyboard_key_state_released = 0,
    wl_keyboard_key_state_pressed = 1,
    wl_keyboard_key_state_repeated = 2,
}

wl_output_subpixel_enum :: enum c.int32_t{
    wl_output_subpixel_unknown = 0,
    wl_output_subpixel_none = 1,
    wl_output_subpixel_horizontal_rgb = 2,
    wl_output_subpixel_horizontal_bgr = 3,
    wl_output_subpixel_vertical_rgb = 4,
    wl_output_subpixel_vertical_bgr = 5,
}

wl_output_transform_enum :: enum c.int32_t{
    wl_output_transform_normal = 0,
    wl_output_transform_90 = 1,
    wl_output_transform_180 = 2,
    wl_output_transform_270 = 3,
    wl_output_transform_flipped = 4,
    wl_output_transform_flipped_90 = 5,
    wl_output_transform_flipped_180 = 6,
    wl_output_transform_flipped_270 = 7,
}

wl_output_mode_enum :: enum c.int32_t{
    wl_output_mode_current = 0x1,
    wl_output_mode_preferred = 0x2,
}

wl_subcompositor_error_enum :: enum c.int32_t{
    wl_subcompositor_error_bad_surface = 0,
    wl_subcompositor_error_bad_parent = 1,
}

wl_subsurface_error_enum :: enum c.int32_t{
    wl_subsurface_error_bad_surface = 0,
}

