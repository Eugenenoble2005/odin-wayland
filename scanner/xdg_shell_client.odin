/* GENERATED BY ODIN WAYLAND SCANNER*/
package scanner
import wl "../"
import "core:c"
/*
Copyright © 2008-2013 Kristian Høgsberg
    Copyright © 2013      Rafael Antognolli
    Copyright © 2013      Jasper St. Pierre
    Copyright © 2010-2013 Intel Corporation
    Copyright © 2015-2017 Samsung Electronics Co., Ltd
    Copyright © 2015-2017 Red Hat Inc.

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice (including the next
    paragraph) shall be included in all copies or substantial portions of the
    Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/
xdg_wm_base :: struct {}
xdg_wm_base_interface : wl.Interface
xdg_wm_base_set_user_data :: proc(xdg_wm_base : ^xdg_wm_base,user_data : rawptr){
    wl.proxy_set_user_data((^wl.Proxy)(xdg_wm_base), user_data)
}
xdg_wm_base_get_user_data :: proc(xdg_wm_base : ^xdg_wm_base) -> rawptr {
    return wl.proxy_get_user_data((^wl.Proxy)(xdg_wm_base))
}
xdg_wm_base_get_version :: proc(xdg_wm_base : ^xdg_wm_base) -> c.uint32_t {
    return wl.proxy_get_version((^wl.Proxy)(xdg_wm_base))
}

xdg_positioner :: struct {}
xdg_positioner_interface : wl.Interface
xdg_positioner_set_user_data :: proc(xdg_positioner : ^xdg_positioner,user_data : rawptr){
    wl.proxy_set_user_data((^wl.Proxy)(xdg_positioner), user_data)
}
xdg_positioner_get_user_data :: proc(xdg_positioner : ^xdg_positioner) -> rawptr {
    return wl.proxy_get_user_data((^wl.Proxy)(xdg_positioner))
}
xdg_positioner_get_version :: proc(xdg_positioner : ^xdg_positioner) -> c.uint32_t {
    return wl.proxy_get_version((^wl.Proxy)(xdg_positioner))
}

xdg_surface :: struct {}
xdg_surface_interface : wl.Interface
xdg_surface_set_user_data :: proc(xdg_surface : ^xdg_surface,user_data : rawptr){
    wl.proxy_set_user_data((^wl.Proxy)(xdg_surface), user_data)
}
xdg_surface_get_user_data :: proc(xdg_surface : ^xdg_surface) -> rawptr {
    return wl.proxy_get_user_data((^wl.Proxy)(xdg_surface))
}
xdg_surface_get_version :: proc(xdg_surface : ^xdg_surface) -> c.uint32_t {
    return wl.proxy_get_version((^wl.Proxy)(xdg_surface))
}

xdg_toplevel :: struct {}
xdg_toplevel_interface : wl.Interface
xdg_toplevel_set_user_data :: proc(xdg_toplevel : ^xdg_toplevel,user_data : rawptr){
    wl.proxy_set_user_data((^wl.Proxy)(xdg_toplevel), user_data)
}
xdg_toplevel_get_user_data :: proc(xdg_toplevel : ^xdg_toplevel) -> rawptr {
    return wl.proxy_get_user_data((^wl.Proxy)(xdg_toplevel))
}
xdg_toplevel_get_version :: proc(xdg_toplevel : ^xdg_toplevel) -> c.uint32_t {
    return wl.proxy_get_version((^wl.Proxy)(xdg_toplevel))
}

xdg_popup :: struct {}
xdg_popup_interface : wl.Interface
xdg_popup_set_user_data :: proc(xdg_popup : ^xdg_popup,user_data : rawptr){
    wl.proxy_set_user_data((^wl.Proxy)(xdg_popup), user_data)
}
xdg_popup_get_user_data :: proc(xdg_popup : ^xdg_popup) -> rawptr {
    return wl.proxy_get_user_data((^wl.Proxy)(xdg_popup))
}
xdg_popup_get_version :: proc(xdg_popup : ^xdg_popup) -> c.uint32_t {
    return wl.proxy_get_version((^wl.Proxy)(xdg_popup))
}

xdg_wm_base_destroy :: proc(_xdg_wm_base: ^xdg_wm_base){
    wl.proxy_marshal_flags((^wl.Proxy)(_xdg_wm_base), 0, nil, wl.proxy_get_version((^wl.Proxy)(_xdg_wm_base)), wl.MARSHAL_FLAG_DESTROY)
}

xdg_wm_base_create_positioner :: proc(_xdg_wm_base: ^xdg_wm_base ) -> ^xdg_positioner{
    data: ^wl.Proxy
    data = wl.proxy_marshal_flags((^wl.Proxy)(_xdg_wm_base), 1, &xdg_positioner_interface,wl.proxy_get_version((^wl.Proxy)(_xdg_wm_base)), 0,nil)
    return (^xdg_positioner)(data)
}

xdg_wm_base_get_xdg_surface :: proc(_xdg_wm_base: ^xdg_wm_base,surface: ^wl_surface ) -> ^xdg_surface{
    data: ^wl.Proxy
    data = wl.proxy_marshal_flags((^wl.Proxy)(_xdg_wm_base), 2, &xdg_surface_interface,wl.proxy_get_version((^wl.Proxy)(_xdg_wm_base)), 0,nil, surface)
    return (^xdg_surface)(data)
}

xdg_wm_base_pong :: proc(_xdg_wm_base: ^xdg_wm_base,serial: c.uint32_t ){
    wl.proxy_marshal_flags((^wl.Proxy)(_xdg_wm_base), 3, nil, wl.proxy_get_version((^wl.Proxy)(_xdg_wm_base)), 0, serial)
}

xdg_positioner_destroy :: proc(_xdg_positioner: ^xdg_positioner){
    wl.proxy_marshal_flags((^wl.Proxy)(_xdg_positioner), 0, nil, wl.proxy_get_version((^wl.Proxy)(_xdg_positioner)), wl.MARSHAL_FLAG_DESTROY)
}

xdg_positioner_set_size :: proc(_xdg_positioner: ^xdg_positioner,width: c.int32_t,height: c.int32_t ){
    wl.proxy_marshal_flags((^wl.Proxy)(_xdg_positioner), 1, nil, wl.proxy_get_version((^wl.Proxy)(_xdg_positioner)), 0, width, height)
}

xdg_positioner_set_anchor_rect :: proc(_xdg_positioner: ^xdg_positioner,x: c.int32_t,y: c.int32_t,width: c.int32_t,height: c.int32_t ){
    wl.proxy_marshal_flags((^wl.Proxy)(_xdg_positioner), 2, nil, wl.proxy_get_version((^wl.Proxy)(_xdg_positioner)), 0, x, y, width, height)
}

xdg_positioner_set_anchor :: proc(_xdg_positioner: ^xdg_positioner,anchor: c.uint32_t ){
    wl.proxy_marshal_flags((^wl.Proxy)(_xdg_positioner), 3, nil, wl.proxy_get_version((^wl.Proxy)(_xdg_positioner)), 0, anchor)
}

xdg_positioner_set_gravity :: proc(_xdg_positioner: ^xdg_positioner,gravity: c.uint32_t ){
    wl.proxy_marshal_flags((^wl.Proxy)(_xdg_positioner), 4, nil, wl.proxy_get_version((^wl.Proxy)(_xdg_positioner)), 0, gravity)
}

xdg_positioner_set_constraint_adjustment :: proc(_xdg_positioner: ^xdg_positioner,constraint_adjustment: c.uint32_t ){
    wl.proxy_marshal_flags((^wl.Proxy)(_xdg_positioner), 5, nil, wl.proxy_get_version((^wl.Proxy)(_xdg_positioner)), 0, constraint_adjustment)
}

xdg_positioner_set_offset :: proc(_xdg_positioner: ^xdg_positioner,x: c.int32_t,y: c.int32_t ){
    wl.proxy_marshal_flags((^wl.Proxy)(_xdg_positioner), 6, nil, wl.proxy_get_version((^wl.Proxy)(_xdg_positioner)), 0, x, y)
}

xdg_positioner_set_reactive :: proc(_xdg_positioner: ^xdg_positioner ){
    wl.proxy_marshal_flags((^wl.Proxy)(_xdg_positioner), 7, nil, wl.proxy_get_version((^wl.Proxy)(_xdg_positioner)), 0)
}

xdg_positioner_set_parent_size :: proc(_xdg_positioner: ^xdg_positioner,parent_width: c.int32_t,parent_height: c.int32_t ){
    wl.proxy_marshal_flags((^wl.Proxy)(_xdg_positioner), 8, nil, wl.proxy_get_version((^wl.Proxy)(_xdg_positioner)), 0, parent_width, parent_height)
}

xdg_positioner_set_parent_configure :: proc(_xdg_positioner: ^xdg_positioner,serial: c.uint32_t ){
    wl.proxy_marshal_flags((^wl.Proxy)(_xdg_positioner), 9, nil, wl.proxy_get_version((^wl.Proxy)(_xdg_positioner)), 0, serial)
}

xdg_surface_destroy :: proc(_xdg_surface: ^xdg_surface){
    wl.proxy_marshal_flags((^wl.Proxy)(_xdg_surface), 0, nil, wl.proxy_get_version((^wl.Proxy)(_xdg_surface)), wl.MARSHAL_FLAG_DESTROY)
}

xdg_surface_get_toplevel :: proc(_xdg_surface: ^xdg_surface ) -> ^xdg_toplevel{
    data: ^wl.Proxy
    data = wl.proxy_marshal_flags((^wl.Proxy)(_xdg_surface), 1, &xdg_toplevel_interface,wl.proxy_get_version((^wl.Proxy)(_xdg_surface)), 0,nil)
    return (^xdg_toplevel)(data)
}

xdg_surface_get_popup :: proc(_xdg_surface: ^xdg_surface,parent: ^xdg_surface,positioner: ^xdg_positioner ) -> ^xdg_popup{
    data: ^wl.Proxy
    data = wl.proxy_marshal_flags((^wl.Proxy)(_xdg_surface), 2, &xdg_popup_interface,wl.proxy_get_version((^wl.Proxy)(_xdg_surface)), 0,nil, parent, positioner)
    return (^xdg_popup)(data)
}

xdg_surface_set_window_geometry :: proc(_xdg_surface: ^xdg_surface,x: c.int32_t,y: c.int32_t,width: c.int32_t,height: c.int32_t ){
    wl.proxy_marshal_flags((^wl.Proxy)(_xdg_surface), 3, nil, wl.proxy_get_version((^wl.Proxy)(_xdg_surface)), 0, x, y, width, height)
}

xdg_surface_ack_configure :: proc(_xdg_surface: ^xdg_surface,serial: c.uint32_t ){
    wl.proxy_marshal_flags((^wl.Proxy)(_xdg_surface), 4, nil, wl.proxy_get_version((^wl.Proxy)(_xdg_surface)), 0, serial)
}

xdg_toplevel_destroy :: proc(_xdg_toplevel: ^xdg_toplevel){
    wl.proxy_marshal_flags((^wl.Proxy)(_xdg_toplevel), 0, nil, wl.proxy_get_version((^wl.Proxy)(_xdg_toplevel)), wl.MARSHAL_FLAG_DESTROY)
}

xdg_toplevel_set_parent :: proc(_xdg_toplevel: ^xdg_toplevel,parent: ^xdg_toplevel ){
    wl.proxy_marshal_flags((^wl.Proxy)(_xdg_toplevel), 1, nil, wl.proxy_get_version((^wl.Proxy)(_xdg_toplevel)), 0, parent)
}

xdg_toplevel_set_title :: proc(_xdg_toplevel: ^xdg_toplevel,title: cstring ){
    wl.proxy_marshal_flags((^wl.Proxy)(_xdg_toplevel), 2, nil, wl.proxy_get_version((^wl.Proxy)(_xdg_toplevel)), 0, title)
}

xdg_toplevel_set_app_id :: proc(_xdg_toplevel: ^xdg_toplevel,app_id: cstring ){
    wl.proxy_marshal_flags((^wl.Proxy)(_xdg_toplevel), 3, nil, wl.proxy_get_version((^wl.Proxy)(_xdg_toplevel)), 0, app_id)
}

xdg_toplevel_show_window_menu :: proc(_xdg_toplevel: ^xdg_toplevel,seat: ^wl_seat,serial: c.uint32_t,x: c.int32_t,y: c.int32_t ){
    wl.proxy_marshal_flags((^wl.Proxy)(_xdg_toplevel), 4, nil, wl.proxy_get_version((^wl.Proxy)(_xdg_toplevel)), 0, seat, serial, x, y)
}

xdg_toplevel_move :: proc(_xdg_toplevel: ^xdg_toplevel,seat: ^wl_seat,serial: c.uint32_t ){
    wl.proxy_marshal_flags((^wl.Proxy)(_xdg_toplevel), 5, nil, wl.proxy_get_version((^wl.Proxy)(_xdg_toplevel)), 0, seat, serial)
}

xdg_toplevel_resize :: proc(_xdg_toplevel: ^xdg_toplevel,seat: ^wl_seat,serial: c.uint32_t,edges: c.uint32_t ){
    wl.proxy_marshal_flags((^wl.Proxy)(_xdg_toplevel), 6, nil, wl.proxy_get_version((^wl.Proxy)(_xdg_toplevel)), 0, seat, serial, edges)
}

xdg_toplevel_set_max_size :: proc(_xdg_toplevel: ^xdg_toplevel,width: c.int32_t,height: c.int32_t ){
    wl.proxy_marshal_flags((^wl.Proxy)(_xdg_toplevel), 7, nil, wl.proxy_get_version((^wl.Proxy)(_xdg_toplevel)), 0, width, height)
}

xdg_toplevel_set_min_size :: proc(_xdg_toplevel: ^xdg_toplevel,width: c.int32_t,height: c.int32_t ){
    wl.proxy_marshal_flags((^wl.Proxy)(_xdg_toplevel), 8, nil, wl.proxy_get_version((^wl.Proxy)(_xdg_toplevel)), 0, width, height)
}

xdg_toplevel_set_maximized :: proc(_xdg_toplevel: ^xdg_toplevel ){
    wl.proxy_marshal_flags((^wl.Proxy)(_xdg_toplevel), 9, nil, wl.proxy_get_version((^wl.Proxy)(_xdg_toplevel)), 0)
}

xdg_toplevel_unset_maximized :: proc(_xdg_toplevel: ^xdg_toplevel ){
    wl.proxy_marshal_flags((^wl.Proxy)(_xdg_toplevel), 10, nil, wl.proxy_get_version((^wl.Proxy)(_xdg_toplevel)), 0)
}

xdg_toplevel_set_fullscreen :: proc(_xdg_toplevel: ^xdg_toplevel,output: ^wl_output ){
    wl.proxy_marshal_flags((^wl.Proxy)(_xdg_toplevel), 11, nil, wl.proxy_get_version((^wl.Proxy)(_xdg_toplevel)), 0, output)
}

xdg_toplevel_unset_fullscreen :: proc(_xdg_toplevel: ^xdg_toplevel ){
    wl.proxy_marshal_flags((^wl.Proxy)(_xdg_toplevel), 12, nil, wl.proxy_get_version((^wl.Proxy)(_xdg_toplevel)), 0)
}

xdg_toplevel_set_minimized :: proc(_xdg_toplevel: ^xdg_toplevel ){
    wl.proxy_marshal_flags((^wl.Proxy)(_xdg_toplevel), 13, nil, wl.proxy_get_version((^wl.Proxy)(_xdg_toplevel)), 0)
}

xdg_popup_destroy :: proc(_xdg_popup: ^xdg_popup){
    wl.proxy_marshal_flags((^wl.Proxy)(_xdg_popup), 0, nil, wl.proxy_get_version((^wl.Proxy)(_xdg_popup)), wl.MARSHAL_FLAG_DESTROY)
}

xdg_popup_grab :: proc(_xdg_popup: ^xdg_popup,seat: ^wl_seat,serial: c.uint32_t ){
    wl.proxy_marshal_flags((^wl.Proxy)(_xdg_popup), 1, nil, wl.proxy_get_version((^wl.Proxy)(_xdg_popup)), 0, seat, serial)
}

xdg_popup_reposition :: proc(_xdg_popup: ^xdg_popup,positioner: ^xdg_positioner,token: c.uint32_t ){
    wl.proxy_marshal_flags((^wl.Proxy)(_xdg_popup), 2, nil, wl.proxy_get_version((^wl.Proxy)(_xdg_popup)), 0, positioner, token)
}

xdg_wm_base_add_listener :: proc(xdg_wm_base : ^xdg_wm_base, listener: ^xdg_wm_base_listener, data: rawptr) -> c.int {
    return wl.proxy_add_listener((^wl.Proxy)(xdg_wm_base), (^rawptr)(listener),data)
}
xdg_wm_base_listener :: struct {
    ping : proc(data:rawptr,xdg_wm_base: ^xdg_wm_base ,serial : c.uint32_t),

}

xdg_surface_add_listener :: proc(xdg_surface : ^xdg_surface, listener: ^xdg_surface_listener, data: rawptr) -> c.int {
    return wl.proxy_add_listener((^wl.Proxy)(xdg_surface), (^rawptr)(listener),data)
}
xdg_surface_listener :: struct {
    configure : proc(data:rawptr,xdg_surface: ^xdg_surface ,serial : c.uint32_t),

}

xdg_toplevel_add_listener :: proc(xdg_toplevel : ^xdg_toplevel, listener: ^xdg_toplevel_listener, data: rawptr) -> c.int {
    return wl.proxy_add_listener((^wl.Proxy)(xdg_toplevel), (^rawptr)(listener),data)
}
xdg_toplevel_listener :: struct {
    configure : proc(data:rawptr,xdg_toplevel: ^xdg_toplevel ,width : c.int32_t ,height : c.int32_t ,states : ^wl.Array),
    close : proc(data:rawptr,xdg_toplevel: ^xdg_toplevel),
    configure_bounds : proc(data:rawptr,xdg_toplevel: ^xdg_toplevel ,width : c.int32_t ,height : c.int32_t),
    wm_capabilities : proc(data:rawptr,xdg_toplevel: ^xdg_toplevel ,capabilities : ^wl.Array),

}

xdg_popup_add_listener :: proc(xdg_popup : ^xdg_popup, listener: ^xdg_popup_listener, data: rawptr) -> c.int {
    return wl.proxy_add_listener((^wl.Proxy)(xdg_popup), (^rawptr)(listener),data)
}
xdg_popup_listener :: struct {
    configure : proc(data:rawptr,xdg_popup: ^xdg_popup ,x : c.int32_t ,y : c.int32_t ,width : c.int32_t ,height : c.int32_t),
    popup_done : proc(data:rawptr,xdg_popup: ^xdg_popup),
    repositioned : proc(data:rawptr,xdg_popup: ^xdg_popup ,token : c.uint32_t),

}

xdg_wm_base_error_enum :: enum c.int32_t{
    xdg_wm_base_error_role = 0,
    xdg_wm_base_error_defunct_surfaces = 1,
    xdg_wm_base_error_not_the_topmost_popup = 2,
    xdg_wm_base_error_invalid_popup_parent = 3,
    xdg_wm_base_error_invalid_surface_state = 4,
    xdg_wm_base_error_invalid_positioner = 5,
    xdg_wm_base_error_unresponsive = 6,
}

xdg_positioner_error_enum :: enum c.int32_t{
    xdg_positioner_error_invalid_input = 0,
}

xdg_positioner_anchor_enum :: enum c.int32_t{
    xdg_positioner_anchor_none = 0,
    xdg_positioner_anchor_top = 1,
    xdg_positioner_anchor_bottom = 2,
    xdg_positioner_anchor_left = 3,
    xdg_positioner_anchor_right = 4,
    xdg_positioner_anchor_top_left = 5,
    xdg_positioner_anchor_bottom_left = 6,
    xdg_positioner_anchor_top_right = 7,
    xdg_positioner_anchor_bottom_right = 8,
}

xdg_positioner_gravity_enum :: enum c.int32_t{
    xdg_positioner_gravity_none = 0,
    xdg_positioner_gravity_top = 1,
    xdg_positioner_gravity_bottom = 2,
    xdg_positioner_gravity_left = 3,
    xdg_positioner_gravity_right = 4,
    xdg_positioner_gravity_top_left = 5,
    xdg_positioner_gravity_bottom_left = 6,
    xdg_positioner_gravity_top_right = 7,
    xdg_positioner_gravity_bottom_right = 8,
}

xdg_positioner_constraint_adjustment_enum :: enum c.int32_t{
    xdg_positioner_constraint_adjustment_none = 0,
    xdg_positioner_constraint_adjustment_slide_x = 1,
    xdg_positioner_constraint_adjustment_slide_y = 2,
    xdg_positioner_constraint_adjustment_flip_x = 4,
    xdg_positioner_constraint_adjustment_flip_y = 8,
    xdg_positioner_constraint_adjustment_resize_x = 16,
    xdg_positioner_constraint_adjustment_resize_y = 32,
}

xdg_surface_error_enum :: enum c.int32_t{
    xdg_surface_error_not_constructed = 1,
    xdg_surface_error_already_constructed = 2,
    xdg_surface_error_unconfigured_buffer = 3,
    xdg_surface_error_invalid_serial = 4,
    xdg_surface_error_invalid_size = 5,
    xdg_surface_error_defunct_role_object = 6,
}

xdg_toplevel_error_enum :: enum c.int32_t{
    xdg_toplevel_error_invalid_resize_edge = 0,
    xdg_toplevel_error_invalid_parent = 1,
    xdg_toplevel_error_invalid_size = 2,
}

xdg_toplevel_resize_edge_enum :: enum c.int32_t{
    xdg_toplevel_resize_edge_none = 0,
    xdg_toplevel_resize_edge_top = 1,
    xdg_toplevel_resize_edge_bottom = 2,
    xdg_toplevel_resize_edge_left = 4,
    xdg_toplevel_resize_edge_top_left = 5,
    xdg_toplevel_resize_edge_bottom_left = 6,
    xdg_toplevel_resize_edge_right = 8,
    xdg_toplevel_resize_edge_top_right = 9,
    xdg_toplevel_resize_edge_bottom_right = 10,
}

xdg_toplevel_state_enum :: enum c.int32_t{
    xdg_toplevel_state_maximized = 1,
    xdg_toplevel_state_fullscreen = 2,
    xdg_toplevel_state_resizing = 3,
    xdg_toplevel_state_activated = 4,
    xdg_toplevel_state_tiled_left = 5,
    xdg_toplevel_state_tiled_right = 6,
    xdg_toplevel_state_tiled_top = 7,
    xdg_toplevel_state_tiled_bottom = 8,
    xdg_toplevel_state_suspended = 9,
}

xdg_toplevel_wm_capabilities_enum :: enum c.int32_t{
    xdg_toplevel_wm_capabilities_window_menu = 1,
    xdg_toplevel_wm_capabilities_maximize = 2,
    xdg_toplevel_wm_capabilities_fullscreen = 3,
    xdg_toplevel_wm_capabilities_minimize = 4,
}

xdg_popup_error_enum :: enum c.int32_t{
    xdg_popup_error_invalid_grab = 0,
}

